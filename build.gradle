plugins {
	id 'org.springframework.boot' version '2.5.5'
	/* 스프링 부트의 의존성 관리 플러그인 */
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	/* 롬복, query-dsl 충돌 방지 */
	id "io.franzbecker.gradle-lombok" version "4.0.0"
	/**
	 *  AsciiDoc 파일을 컨버팅하고 Build 폴더에 복사하기 위한 플러그인입니다.
	 *  gradle 7 부터는 org.asciidoctor.convert 가 아닌
	 * asciidoctor.jvm.convert 를 사용해야한다. (현재 7.1.1 gradle.wrapper.properties 확인)
	 */
	// id "org.asciidoctor.convert" version "1.5.9.2"
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}
ext {

	snippetsDir = file('build/generated-snippets')
}

// 실행시키면 QueryDSL의 QClass 생성가능하다.
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath

	providedRuntime
}

repositories {
	mavenCentral()
}

/**
 * 다음과 같이 선언하면 spring-boot-starter-dependencies 에서 정의한 버전을 덮어쓴다.
 *
 * See https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#managing-dependencies-customizing
 */
ext["h2.version"] = "1.4.199"

/* dependencie 등록 블럭, hover 하면 버전이 나온다. */
dependencies {
	implementation 'junit:junit:4.13.1'

	/* 롬복 : @getter, @setter 등 반복 메서드 작성 코드를 줄여줌 */
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor("org.projectlombok:lombok")

	/* MVC, Jackson, Databind, Hibernate, log4j 등의 의존성 포함 */
	implementation("org.springframework.boot:spring-boot-starter-web")
	/* @ConfigurationProperties 를 사용하여 application.yml값 자동 주입 */
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	/* JPA */
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	/* security 기본적인 보안에 관련된 기능을 제공 Ex)인증, 로그인 페이지 등 제공 */
	implementation("org.springframework.boot:spring-boot-starter-security")
	/* Thymeleaf에서 Spring Security 통합 모듈을 사용하기 위한 의존성 추가 */
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	/**
	 * actuate : springboot 모니터링 라이브러리, spring-boot-starter-web와 함께 사용
	 * ex) http://localhost:8080/actuator 사용할 수 있는 모니터링 리스트
	 * https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html
	 * self, health, health-path, info 등..
 	 */
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-tomcat")
	/**
	 * Spring boot 2.3.0.RELEASE 부터 spring-boot-starter-web 에서 분리됨
	 * https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.3-Release-Notes
	 */
	implementation("org.springframework.boot:spring-boot-starter-validation")
	/* JSP 대신 springboot 가 권장하는 view 템플릿 엔진 */
	implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
	/* h2 db 연동용 */
	implementation("com.h2database:h2")

	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 StringUtils
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

	// logback 라이브러리는 spring-boot 에 포함되어잇지만 해당 버전에서는 라이브러리 추가가 필요하며 1.1.+ 버전은 호환안됨
	implementation('ch.qos.logback:logback-classic:1.2.5')

	// QueryDSL
	implementation("com.querydsl:querydsl-jpa")
	implementation("com.querydsl:querydsl-apt")

	// devtools 정적리소 liveReload
	developmentOnly("org.springframework.boot:spring-boot-devtools")

	// 객체의 프로퍼티를 다른 객체의 프로퍼티로 맵핑해주는 유틸리티
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.4.5'

	// validation 지원 ex) @Valid
	// 이 빈 검증 기능을 이용하려면 LocalValidatorFactoryBean 을 빈으로 등록하고 VaidationService 를 제공해주어야 하는데,
	// SpringBoot 에서는 의존성만 추가하면 검증을 위한 빈들이 자동으로 등록된다.
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	/* kafka 관련 디펜덴시 */
	implementation 'org.springframework.kafka:spring-kafka'

	/* Java Object 를 JSON 으로 변환, JSON 을 Java Object 로 변환 */
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'

	/* 프로메테우스 */
	// https://mvnrepository.com/artifact/io.micrometer/micrometer-registry-prometheus
	implementation 'io.micrometer:micrometer-registry-prometheus:1.7.6'

	/**
	 * "spring-boot-starter-test" 에는 다음 라이브러리들이 포함
	 * - JUnit 5 (JUnit 4와의 하위 호환성을위한 빈티지 엔진 포함)
	 * - AssertJ, Hamcrest, Mockito, JSONassert, JsonPath
	 * Spring Boot 2.4.0 부터 junit-vintage-engine 이 제거되었다.
	 * Spring Boot 2.4.0 으로 업그레이드 하려면 JUnit5 로 이관을 마쳐야 한다.
	 * JUnit 5로 마이그레이션 한 경우 다음 예제와 같이 JUnit 4 지원을 제외해야 한다. 빈티지 엔진을 exclude 한다.
	 * Junit 5에서는 jupiter를 의존해 추가 기능을 사용해야 한다. (ex: @BeforeEach )
	 */
	testImplementation ("org.springframework.boot:spring-boot-starter-test") {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	/* kafka 관련 디펜덴시 */
	testImplementation 'org.springframework.kafka:spring-kafka-test'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

	/* test 시에도 query dsl 모델을 사용하기 위해서는 해당 옵션을 추가 해줘야 한다. */
	testCompileOnly("org.projectlombok:lombok")
	testAnnotationProcessor("org.projectlombok:lombok")

	runtimeOnly("com.h2database:h2")
	/* Java9 이상부터는 jaxb 의존성을 추가해야함 */
	//compileOnly("javax.xml.bind:jaxb-api")

	//sentry 라이브러리
	implementation ("io.sentry:sentry-spring-boot-starter:5.1.1")
	/*logback에 찍히는 로그 정보를 Sentry에서 모니터링하고 싶은 경우 사용 라이브러리*/
	implementation("io.sentry:sentry-logback:5.1.1")

	/* mockmvc 를 restdocs 에 사용할수 있게 하는 라이브러리입니다. Rest Assured 를 사용하자고 하시면
	testCompile('org.springframework.restdocs:spring-restdocs-restassured') 를 대신 사용하시면 됩니다. */
	testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
	// .adoc 파일이 build/generated-snippets 을 가리키도록 자동으로 구성해주는 설정
	// adoc 파일에 아래 코드를 추가할 필요가 없음! -> docinfo 정상 include 가능해짐
	// ifndef::snippets[]
	// :snippets: ./build/generated-snippets
	// endif::[]
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

/* queryDSL QClass 가 생성될 경로 설정 */
/* project structure module 에서 해당 경로를 'source' 에 main/java 아래에 추가 필요 */
def querydslSrcDir = 'src/main/generated'

querydsl {
	library = "com.querydsl:querydsl-apt"
	jpa = true
	querydslSourcesDir = querydslSrcDir
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', querydslSrcDir]
		}
	}
}

//querydsl 추가 끝

/* lombok 을 사용한 다면 해당 옵션을 넣어줘야 cannot find symbol 에러가 발생하지 않는다 */
project.afterEvaluate {

	project.tasks.compileQuerydsl.options.compilerArgs = [
			"-proc:only",
			"-processor", project.querydsl.processors() +
					',lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
	]
}


test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}


asciidoctor {
	// gradle build 시 test -> asciidoctor 순으로 수행됩니다.
	dependsOn test
	configurations 'asciidoctorExtensions'
	inputs.dir snippetsDir
	//attributes["snippets"]=snippetsDir
	sources{
		include("**/index.adoc","**/common/*.adoc")
	}

	baseDirFollowsSourceFile()
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}


//
//bootJar {
//    dependsOn asciidoctor
//    copy {
//        from "${asciidoctor.outputDir}"
//        into 'src/main/resources/static/docs'
//    }

//asciidoctor {
//	inputs.dir snippetsDir
//	dependsOn test
//}
//
//asciidoctor.doFirst {
//	delete file('src/main/resources/static/docs')
//}
//
//task copyDocument(type: Copy) {
//	dependsOn asciidoctor
//	from file("build/docs/asciidoc")
//	into file("src/main/resources/static/docs")
//}
//
